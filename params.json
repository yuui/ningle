{"name":"ningle","body":"\"ningle\" is a lightweight web application framework for Common Lisp.\r\n\r\n## Usage\r\n\r\n```common-lisp\r\n(defvar *app* (make-instance 'ningle:<app>))\r\n\r\n(setf (ningle:route *app* \"/\")\r\n      \"Welcome to ningle!\")\r\n\r\n(setf (ningle:route *app* \"/login\" :method :POST)\r\n      #'(lambda (params)\r\n          (if (authorize (getf params :|username|)\r\n                         (getf params :|password|))\r\n            \"Authorized!\"\r\n            \"Failed...Try again.\")))\r\n\r\n(clack:clackup *app*)\r\n```\r\n\r\nNow you can access to http://localhost:5000/ and then ningle should show you \"Welcome to ningle!\".\r\n\r\n## Description\r\n\r\nningle is a fork project of [Caveman](http://fukamachi.github.com/caveman/). ningle doesn't require you to generate a project skeleton.\r\n\r\nAs this is a thin framework, you need to have subtle knowledge about [Clack](http://clacklisp.org). It is a server interface ningle bases on.\r\n\r\n## Getting started\r\n\r\n### Routing\r\n\r\nningle has the [Sinatra](http://www.sinatrarb.com/)-like routing system.\r\n\r\n```common-lisp\r\n;; GET request (default)\r\n(setf (ningle:route *app* \"/\" :method :GET) ...)\r\n\r\n;; POST request\r\n(setf (ningle:route *app* \"/\" :method :POST) ...)\r\n\r\n;; PUT request\r\n(setf (ningle:route *app* \"/\" :method :PUT) ...)\r\n\r\n;; DELETE request\r\n(setf (ningle:route *app* \"/\" :method :DELETE) ...)\r\n\r\n;; OPTIONS request\r\n(setf (ningle:route *app* \"/\" :method :OPTIONS) ...)\r\n```\r\n\r\nRoute pattern may contain \"keyword\" to put the value into the argument.\r\n\r\n```common-lisp\r\n(setf (ningle:route *app* \"/hello/:name\")\r\n      #'(lambda (params)\r\n          (format nil \"Hello, ~A\" (getf params :name))))\r\n```\r\n\r\nThe above controller will be invoked when you access to \"/hello/Eitarow\" or \"/hello/Tomohiro\", and then `(getf params :name)` will be \"Eitarow\" and \"Tomohiro\".\r\n\r\nRoute patterns may also contain \"wildcard\" parameters. They are accessible by `(getf params :splat)`.\r\n\r\n```common-lisp\r\n(setf (ningle:route *app* \"/say/*/to/*\")\r\n      #'(lambda (params)\r\n          ; matches /say/hello/to/world\r\n          (getf params :splat) ;=> (\"hello\" \"world\")\r\n          ))\r\n\r\n(setf (ningle:route *app* \"/download/*.*\")\r\n      #'(lambda (params)\r\n          ; matches /download/path/to/file.xml\r\n          (getf params :splat) ;=> (\"path/to/file\" \"xml\")\r\n          ))\r\n```\r\n\r\n### Request & Response\r\n\r\nningle provides two special variables named `*request*` and `*response*`. They will be bound to an instance [Clack.Request](http://clacklisp.org/doc/clack.request.html) and [Clack.Response](http://clacklisp.org/doc/clack.response.html) for each request.\r\n\r\nFor example, by using them, you can change the response status code, Content-Type or something like that in each controllers.\r\n\r\n### Context\r\n\r\nningle provides an useful function named `context`. It is an accessor to an internal hash table.\r\n\r\n```common-lisp\r\n(setf (context :database)\r\n      (dbi:connect :mysql\r\n                   :database-name \"test-db\"\r\n                   :username \"nobody\"\r\n                   :password \"nobody\"))\r\n\r\n(context :database)\r\n;;=> #<DBD.MYSQL:<DBD-MYSQL-CONNECTION> #x3020013D1C6D>\r\n```\r\n\r\n### Using Session\r\n\r\nningle doesn't provide Session system in the core, but recommends to use [Clack.Middleware.Session](http://clacklisp.org/doc/clack.middleware.session.html) with [Clack.Builder](http://clacklisp.org/doc/clack.builder.html).\r\n\r\n```common-lisp\r\n(import 'clack.builder:builder\r\n        'clack.middleware.session:<clack-middleware-session>)\r\n\r\n(clack:clackup\r\n  (builder\r\n    <clack-middleware-session>\r\n    *app*))\r\n```\r\n\r\nOf course, you can use other Clack Middlewares with ningle.\r\n\r\n## See Also\r\n\r\n* [Clack](http://clacklisp.org/)\r\n\r\n## Author\r\n\r\n* Eitarow Fukamachi (e.arrows@gmail.com)\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2012 Eitarow Fukamachi (e.arrows@gmail.com)\r\n\r\n## License\r\n\r\nLicensed under the LLGPL License.\r\n","tagline":"A lightweight web application framework for Common Lisp","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}